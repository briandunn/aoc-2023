#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# 14.2 - Spin Cycle

#!value

#!value --name test

O....#....
O.OO#....#
.....##...
OO.#O....O
.O.....O#.
O.#..O.#.#
..O..#O..O
.......O..
#....###..
#OO..#....

#!fsharp

type Tile = Ball | Cube
type Pt = int*int
type Board = {tiles: Map<Pt, Tile>; width: int; height: int}

let parse (input: string) : Board =
  let lines = input.TrimEnd('\n').Split('\n')
  let width = lines |> Seq.tryHead |> Option.map Seq.length |> Option.defaultValue 0
  let height = Seq.length lines
  let tiles = seq {
    for y,line in Seq.indexed lines do
        for x,c in Seq.indexed line do
          match c with
          | 'O' -> yield (x,y), Ball
          | '#' -> yield (x,y), Cube
          | _ -> ()
  }

  {tiles = Map.ofSeq tiles; width = width; height = height}

#!fsharp

#!share test --from value

parse test

#!fsharp

type Cardinal = N | E | S | W

let slice groupBy sortBy =
  Map.toSeq
  >> Seq.groupBy (fst >> groupBy)
  >> Seq.map (fun (i, tiles) -> i, tiles |> Seq.map (fun (pt, t) -> sortBy pt,t) |> Seq.sortBy fst)

let columns : Map<Pt,Tile> -> (int* ((int*Tile) seq)) seq = slice fst snd
let rows : Map<Pt,Tile> -> (int* ((int*Tile) seq)) seq = slice snd fst

let slide: (int*Tile) seq -> (int*Tile) seq =
  let rec slide height slid =
    function
    | (i, Ball)::rest -> slide (height + 1) ((height, Ball)::slid) rest
    | (i, Cube)::rest -> slide (i + 1) ((i, Cube)::slid) rest
    | [] -> slid |> List.rev |> Seq.ofList
  Seq.toList >> slide 0 []

let invert length =
  let mapTile (j, t) = length - j - 1, t
  let mapLine (i, line) = i, line |> Seq.map mapTile |> Seq.rev
  Seq.map mapLine 

let rotate ((x,y),t) = ((y,x), t)
let revert max ((x,y),t) = ((x, max - y - 1), t)

let tilt cardinal board =
  let tilt tiles = 
    let lines, convert = match cardinal with
                         | N -> (columns tiles), id
                         | W -> (rows tiles), rotate
                         | S -> (tiles |> columns |> invert board.height), revert board.height
                         | E -> (tiles |> rows |> invert board.width), revert board.width >> rotate
    seq { for i,line in lines do
          for j, tile in slide line do
            yield convert <| ((i, j), tile)
    } |> Map.ofSeq


  { board with tiles = tilt board.tiles }

#!fsharp

((slide [1,Ball; 3,Cube; 6,Ball]) = [0,Ball; 3,Cube; 4, Ball])
slide [1,Ball; 3,Cube; 6,Ball]

[(0, [(9, Ball);(8, Ball);(6, Ball);(4, Ball);(1, Cube);(0, Cube)])] |> Seq.iter (snd >> Seq.rev >> slide >> Seq.iter (printfn "%A"))

#!fsharp

#!share test --from value

test |> parse |> (fun b -> b.tiles) |> rows

#!fsharp

let print {height = height; width = width; tiles = tiles} = 
  seq { for y in 0..height-2 do
        yield '\n'
        for x in 0..width-1 do
        match Map.tryFind (x,y) tiles with
        | Some Ball -> yield 'O'
        | Some Cube -> yield '#'
        | None -> yield '.'
  } |> Seq.map string |> String.concat "" |> printfn "%s"

#!fsharp

#!share test --from value

// test |> parse |> tilt N |> print
test |> parse |> tilt W |> print
test |> parse |> tilt E |> print

#!fsharp

let cycle board =
   [N;W;S;E] |> List.fold (fun board cardinal -> tilt cardinal board) board

let findLoop =
  let change =
    function
    | Some Ball -> Some Cube
    | Some Cube -> Some Ball
    | _ -> None
  let rec loop i prev board =
    prev
    |> Map.tryFind board
    |> function
       | Some _ -> prev, board
       | None -> 
         loop (i + 1) (Map.add board i prev) (cycle board)
  loop 0 Map.empty

let loops =
  let unfold board =
    let loop, board = findLoop board
    Some (loop, board)

  Seq.unfold unfold

#!value

#!value --name loadTest

OOOO.#.O..
OO..#....#
OO..O##..O
O..#.OO...
........#.
..#....#.#
..O..#.O.O
..O.......
#....###..
#....#....

#!fsharp

#!share loadTest --from value

let load {height = height; tiles = tiles} = 
  let fold sum (_,y) = 
    function
    | Ball -> sum + (height - y)
    | Cube -> sum
  tiles |> Map.fold fold 0

loadTest |> parse |> load

#!fsharp

#load "Aoc.fsx"

let input = Aoc.fetchInput 14

#!fsharp

#!share test --from value

let fewestCycles initial loopSize target =
  (target - initial) % loopSize

let solve n input = 
  let board = parse input

  board
  |> loops
  |> Seq.take 2
  |> Seq.toList
  |> function
     | [initial; firstLoop] ->
        let i = fewestCycles (Map.count initial) (Map.count firstLoop) n
        firstLoop
        |> Map.tryFindKey (fun _ index -> index = i)
        |> Option.map load
     | _ -> None


solve 1_000_000_000 input
