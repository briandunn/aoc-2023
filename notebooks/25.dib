#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# [Day 25](https://adventofcode.com/2023/day/25) - cut the cord

find three edges hat when removed breaks the graph in two

#!value

#!value --name testInput

jqt: rhn xhk nvd
rsh: frs pzl lsr
xhk: hfx
cmg: qnr nvd lhk bvb
rhn: xhk bvb hfx
bvb: xhk hfx
pzl: lsr hfx nvd
qnr: nvd
ntq: jqt hfx bvb xhk
nvd: lhk
lsr: lhk
rzs: qnr cmg lsr rsh
frs: qnr lhk lsr

#!csharp

#r "nuget: Microsoft.DotNet.Interactive.Extensionlab, 1.0.0-beta.24101.2"

#!fsharp

#load "Aoc.fsx"
open Aoc

#!fsharp

#!share testInput --from value

let parse (input: string) = 
  seq {
    for line in input.Split('\n') do
      match line.Split(':') with
      | [| key; values |] -> Some (key, Set.ofArray <| values.Trim().Split(' '))
      | _ -> None
  } |> Seq.choose id |> Map.ofSeq


parse testInput

#!fsharp

let toEdge a b =
  if a < b then a, b else b, a
  
let edges edgeMap =
  Set.ofSeq <| seq {
    for node,connections in Map.toSeq edgeMap do
      for connection in connections -> toEdge node connection
  }

testInput |> parse |> edges

#!fsharp

let nodes (edges: (string*string) Set) = seq { for a,b in edges do a; b } |> Set.ofSeq
testInput |> parse |> edges |> nodes

#!fsharp

type Neighbors = Map<string, Set<string>>
module Neighbors =
  let tryPop node (neighborMap: Neighbors) =
    let map =
      let fold neighborMap neighbor = Map.change neighbor (Option.map (Set.remove node)) neighborMap
      Set.fold fold neighborMap

    neighborMap
    |> Map.tryFind node
    |> function
       | Some neighbors -> Some neighbors, map neighbors
       | None -> None, neighborMap 

  let pop node (neighborMap: Neighbors) =
    let map =
      let fold neighborMap neighbor = Map.change neighbor (Option.map (Set.remove node)) neighborMap
      Set.fold fold neighborMap

    neighborMap
    |> Map.tryFind node
    |> function
       | Some neighbors -> neighbors, map neighbors
       | None -> Set.empty, neighborMap 

  let fromEdges edges = 
    let nodes = nodes edges
    Map.ofSeq <| seq {
      for node in nodes do
        let fold acc = 
          function
          | a,b when a = node -> Set.add b acc
          | a,b when b = node -> Set.add a acc
          | _ -> acc
        node, edges |> Seq.fold fold Set.empty
    }

#!fsharp

let toDot edges =
  let nodes = String.concat "\n" <| seq { for a,b in edges -> sprintf "%s -- %s;" a b }
  nodes |> sprintf "graph {\n%s\n}\n" |> Aoc.dot |> HTML

testInput |> parse |> edges |> toDot 

#!markdown

Ok the thing I notice: All of the edges participate in cycles. Most are in triangles. Some are in squares. The three edges we want to cut are in hexagons. And they're the only edges that are only in hexagons. And 6 is the longest cycle.

So maybe:

Find the shortest cycle for each edge. If there are three with the longest cycles... we win?

Ok so how do we find the shortest cycles for each edge. Could do Dikestra, but allow returning to the starting node. As soon as we do boom. Would have to do it from every node.

#!fsharp

let tightestLoop1 ((a,b) as edge) (edges: (string*string) Set) =
  let edges = Set.remove edge edges
  let neighborMap = Neighbors.fromEdges edges
  let neighbors vertex = neighborMap |> Map.tryFind vertex |> Option.defaultValue Set.empty

  let rec loop dest =
    Weights.popMin
    >> function
    | Some (weight, current), _ when current = dest -> weight
    | Some (weight, current), weights ->
      let updateWeights weights neighbor = 
        let nextWeight = weight + 1
        match Weights.tryFind neighbor weights with
        | Some previousWeight when nextWeight < previousWeight -> Weights.add nextWeight neighbor weights
        | _ -> weights
      current
      |> neighbors
      |> Set.fold updateWeights weights
      |> loop dest
    | None, _ -> 0

  let weigh weights node = Weights.add (if node = b then 0 else System.Int32.MaxValue) node weights

  edges
  |> nodes
  |> Set.fold weigh Weights.empty
  |> loop a  


let allEdges = testInput |> parse |> edges
seq { for edge in allEdges do edge, tightestLoop1 edge allEdges } |> Seq.sortBy snd |> Seq.iter (printfn "%A")

#!fsharp

let tightestLoop ((a,b) as edge) (edges: (string*string) Set) =
  let edges = Set.remove edge edges
  let neighborMap = Neighbors.fromEdges edges

  let rec loop neighborMap: (string*int) list -> int =
    function
    | (head,steps)::rest when head = b -> steps
    | (head,steps)::rest ->
      match Neighbors.tryPop head neighborMap with
      | Some neighbors, neighborMap -> 
        let steps = steps + 1
        loop neighborMap (rest @ [for neighbor in neighbors -> neighbor, steps])
      | None, neighborMap -> loop neighborMap rest
    | [] -> 0

  loop neighborMap [a,0] 


let allEdges = testInput |> parse |> edges
seq { for edge in allEdges do edge, tightestLoop edge allEdges } |> Seq.sortBy snd |> Seq.iter (printfn "%A")

#!fsharp

let cluster edges =
  let neighborMap = edges |> Neighbors.fromEdges
  let findNeighbors depth node =
    let rec loop depth neighbors =
      if depth = 0 then neighbors
      else
        neighbors |> Set.fold (fun acc n -> neighborMap |> Map.find n |> Set.union acc) Set.empty |> loop (depth - 1)
    loop depth (Set.singleton node)

  let clusterFuck =
    let rec loop =
      function
      | [_;_] as clusters -> clusters
      | head::(_::_ as rest) ->
        let m = rest |> List.map (fun cluster -> cluster, head |> Set.intersect cluster |> Set.count) |> List.groupBy snd |> Map.ofList
        let mostConnected = m |> Map.maxKeyValue |> snd |> List.map fst |> List.minBy Set.count
        // union with the most connected, difference from the rest
        let index = List.findIndex ((=) mostConnected) rest
        rest |> List.mapi (fun i c -> if i = index then Set.union head c else Set.difference c head ) |> List.sortBy (Set.count) |> loop
    loop

  let divvy depth a b =
    // put each node in the cluser where it has the most neighbors
    let fold (a,b, tied) n =
      let neighbors = findNeighbors depth n
      if [a;b] |> List.map (Set.intersect neighbors >> Set.count) |> List.distinct |> List.length |> ((=) 1) then
        (a,b, n::tied)
      else
        [a;b] |> List.sortBy (Set.intersect neighbors >> Set.count)
        |> function
          | [a;b] -> (Set.remove n a, Set.add n b, tied)
    Set.fold fold (a,b, [])
  
  neighborMap
  |> Map.toList |> List.map (fun (k, v) -> Set.add k v )
  |> clusterFuck
  |> function
     | [a;b] ->
      let a,b, tied = edges |> nodes |> divvy 1 a b
      let rec loop depth a b tied =
        if List.isEmpty tied then [a;b]
        elif depth > 10 then
          tied |> List.sort |> List.iter (printfn "%A")
          [a;b]
        else
          let tieCount = List.length tied
          let a,b, tied = tied |> Set.ofList |> divvy depth a b
          if (List.length tied) = tieCount then
            loop (depth + 1) a b tied
          else
            loop depth a b tied
      loop 1 a b tied

let bridges a b edges =
  let neighborMap = Neighbors.fromEdges edges
  a |> Set.map (fun n -> n, Map.find n neighborMap |> Set.intersect b )


testInput |> parse |> edges |> cluster

#!markdown

What if it's not tightest loop, it's like, interconnectedness. the cluster on the left - every node is connected to three other nodes in the cluster. How many steps does it take to get to a new node?
Or of my neighbors, how many are neighbors? if any of my neighbors are neighbors, they're in my cluster.

#!markdown

_boom_ ok that looks promising. Let's sketch out a solve.

#!fsharp

let components =
  let unfoldAll edges =
    let neighborMap = Neighbors.fromEdges edges
    let tryPopNeighbors node neighbors = neighborMap |> Map.tryFind node |> Option.defaultValue Set.empty
    let unfoldOne =
      function
      | head::rest, neighborMap ->
        match Neighbors.tryPop head neighborMap with
        | Some neighbors, neighborMap -> Some (neighbors |> Set.toSeq |> Seq.map (toEdge head), (rest @ Set.toList neighbors, neighborMap))
        | None, neighborMap -> Some (Seq.empty, (rest, neighborMap))
      | [], _ -> None

    edges
    |> Seq.tryHead
    |> Option.map (fun edge -> Seq.unfold unfoldOne ([fst edge], neighborMap) |> Seq.concat |> Set.ofSeq)
    |> Option.map (fun comp -> comp, Set.difference edges comp)

  Seq.unfold unfoldAll

components <| Set.ofList ["a","b";"b","c";"d","e"]

#!fsharp

let solve1 input =
  let edges = input |> parse |> edges

  seq { for edge in edges do edge, tightestLoop edge edges }
  |> Seq.sortBy snd
  |> Seq.rev
  |> Seq.iter (printfn "%A")
  // |> Seq.map fst
  // |> Seq.take 3
  // |> Set.ofSeq
  // |> Set.difference edges
  // |> components
  // |> Seq.map (nodes >> Seq.length)
  // |> Seq.reduce (*)

solve1 testInput

#!markdown

Ok so my clustering attempts failed. Wind up with 166 nodes that have equal connectedness to either side. Cheated - looked up another solution and they mentioned [Karger](https://en.wikipedia.org/wiki/Karger%27s_algorithm). Let's try that.

#!fsharp

module Karger =
  let random = System.Random()

  let randomEdge (edges: 'a seq) =
    let index = random.Next(max (Seq.length edges - 1) 0)
    edges |> Seq.item index

  let contract ((a,b) as edge) =
    let contractedNode = sprintf "%s%s" a b

    let choose =
      function
      | _, edge' when edge' = edge -> None
      | i, (x,y) when x = a || x = b -> Some (i, toEdge contractedNode y)
      | i, (x,y) when y = a || y = b -> Some (i, toEdge x contractedNode)
      | edge' -> Some edge'

    List.choose choose

  let nodeCount (edges: (string * string) seq) = seq { for a,b in edges do a; b } |> Seq.distinct |> Seq.length

  let reduce edges =
    let rec loop i edges =
      if i = 2 then edges
      else edges |> contract (edges |> randomEdge |> snd) |> loop (i - 1)

    let indexed = edges |> Seq.indexed |> List.ofSeq
    let cutIndexes = indexed |> loop (nodeCount edges) |> Seq.map fst |> Set.ofSeq
    indexed |> Seq.filter (fun (i, _) -> Set.contains i cutIndexes) |> Seq.map snd

  let solveUntil n edges =
    let rec loop edges =
      let solution = reduce edges
      let cutCount = Seq.length solution
      // printfn "cut count: %d" cutCount
      if cutCount = n then solution
      else loop edges
    loop edges

//  __
// |  |\
// |  |/
//  --

["A","B"
 "A","E"
 "B","D"
 "B","C"
 "C","D"
 "D","E"] |> List.indexed |> Karger.contract ("B", "D") |> Karger.contract ("A", "E") |> Karger.contract ("AE", "BD")

#!fsharp

["A","B"
 "A","E"
 "B","D"
 "B","C"
 "C","D"
 "D","E"] |> Karger.reduce

#!fsharp

testInput |> parse |> edges |> Karger.solveUntil 3

#!fsharp

let input = Aoc.fetchInput 25

input |> parse |> edges |> toDot

#!fsharp

let combinationCount (k: int) (n: int) =
  let rec factorial =
    function
    | 0L -> 1L
    | n -> n * factorial n - 1L

  factorial n / (factorial k * factorial (int64 (n - k)))



// input |> parse |> edges |> Set.count |> combinationCount 3

#!fsharp

let solve1 input =
  let edges = input |> parse |> edges

  edges
  |> Karger.solveUntil 3
  |> Set.ofSeq
  |> Set.difference edges
  |> components
  |> Seq.map (nodes >> Seq.length)
  |> Seq.reduce (*)




// 1488 too low
// 426800 too low
// 437936 wrong answer



solve1 input
