#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# [Day 25](https://adventofcode.com/2023/day/25) - cut the cord

find three edges hat when removed breaks the graph in two

#!value

#!value --name testInput

jqt: rhn xhk nvd
rsh: frs pzl lsr
xhk: hfx
cmg: qnr nvd lhk bvb
rhn: xhk bvb hfx
bvb: xhk hfx
pzl: lsr hfx nvd
qnr: nvd
ntq: jqt hfx bvb xhk
nvd: lhk
lsr: lhk
rzs: qnr cmg lsr rsh
frs: qnr lhk lsr

#!fsharp

#!share testInput --from value

#!fsharp

let parse (input: string) = 
  seq {
    for line in input.Split('\n') do
      match line.Split(':') with
      | [| key; values |] -> Some (key, Set.ofArray <| values.Trim().Split(' '))
      | _ -> None
  } |> Seq.choose id |> Map.ofSeq


parse testInput

#!fsharp

let toEdge a b =
  if a < b then a, b else b, a
  
let edges edgeMap =
  Set.ofSeq <| seq {
    for node,connections in Map.toSeq edgeMap do
      for connection in connections -> toEdge node connection
  }

testInput |> parse |> edges

#!fsharp

let nodes (edges: (string*string) Set) = seq { for a,b in edges do a; b } |> Set.ofSeq
testInput |> parse |> edges |> nodes

#!fsharp

type Neighbors = Map<string, Set<string>>
module Neighbors =
  let tryPop node (neighborMap: Neighbors) =
    let map =
      let fold neighborMap neighbor = Map.change neighbor (Option.map (Set.remove node)) neighborMap
      Set.fold fold neighborMap

    neighborMap
    |> Map.tryFind node
    |> function
       | Some neighbors -> Some neighbors, map neighbors
       | None -> None, neighborMap 

  let fromEdges edges = 
    let nodes = nodes edges
    Map.ofSeq <| seq {
      for node in nodes do
        let fold acc = 
          function
          | a,b when a = node -> Set.add b acc
          | a,b when b = node -> Set.add a acc
          | _ -> acc
        node, edges |> Seq.fold fold Set.empty
    }

#!fsharp

let toDot edges =
  let nodes = String.concat "\n" <| seq { for a,b in edges -> sprintf "%s -- %s;" a b }
  sprintf "graph {\n%s\n}\n" nodes

testInput |> parse |> edges |> toDot

#!html

<img src="../graph.svg?y" />

#!markdown

Ok the thing I notice: All of the edges participate in cycles. Most are in triangles. Some are in squares. The three edges we want to cut are in hexagons. And they're the only edges that are only in hexagons. And 6 is the longest cycle.

So maybe:

Find the shortest cycle for each edge. If there are three with the longest cycles... we win?

Ok so how do we find the shortest cycles for each edge. Could do Dikestra, but allow returning to the starting node. As soon as we do boom. Would have to do it from every node.

#!fsharp

#load "Aoc.fsx"
open Aoc

#!fsharp

let tightestLoop1 ((a,b) as edge) (edges: (string*string) Set) =
  let edges = Set.remove edge edges
  let neighborMap = Neighbors.fromEdges edges
  let neighbors vertex = neighborMap |> Map.tryFind vertex |> Option.defaultValue Set.empty

  let rec loop dest =
    Weights.popMin
    >> function
    | Some (weight, current), _ when current = dest -> weight
    | Some (weight, current), weights ->
      let updateWeights weights neighbor = 
        let nextWeight = weight + 1
        match Weights.tryFind neighbor weights with
        | Some previousWeight when nextWeight < previousWeight -> Weights.add nextWeight neighbor weights
        | _ -> weights
      current
      |> neighbors
      |> Set.fold updateWeights weights
      |> loop dest
    | None, _ -> 0

  let weigh weights node = Weights.add (if node = b then 0 else System.Int32.MaxValue) node weights

  edges
  |> nodes
  |> Set.fold weigh Weights.empty
  |> loop a  


let allEdges = testInput |> parse |> edges
seq { for edge in allEdges do edge, tightestLoop1 edge allEdges } |> Seq.sortBy snd |> Seq.iter (printfn "%A")

#!fsharp

let tightestLoop ((a,b) as edge) (edges: (string*string) Set) =
  let edges = Set.remove edge edges
  let neighborMap = Neighbors.fromEdges edges

  let rec loop neighborMap: (string*int) list -> int =
    function
    | (head,steps)::rest when head = b -> steps
    | (head,steps)::rest ->
      match Neighbors.tryPop head neighborMap with
      | Some neighbors, neighborMap -> 
        let steps = steps + 1
        loop neighborMap (rest @ [for neighbor in neighbors -> neighbor, steps])
      | None, neighborMap -> loop neighborMap rest
    | [] -> 0

  loop neighborMap [a,0] 


let allEdges = testInput |> parse |> edges
seq { for edge in allEdges do edge, tightestLoop edge allEdges } |> Seq.sortBy snd |> Seq.iter (printfn "%A")

#!markdown

*boom* ok that looks promising. Let's sketch out a solve.

#!fsharp

let components =
  let unfoldAll edges =
    let neighborMap = Neighbors.fromEdges edges
    let tryPopNeighbors node neighbors = neighborMap |> Map.tryFind node |> Option.defaultValue Set.empty
    let unfoldOne =
      function
      | head::rest, neighborMap ->
        match Neighbors.tryPop head neighborMap with
        | Some neighbors, neighborMap -> Some (neighbors |> Set.toSeq |> Seq.map (toEdge head), (rest @ Set.toList neighbors, neighborMap))
        | None, neighborMap -> Some (Seq.empty, (rest, neighborMap))
      | [], _ -> None

    edges
    |> Seq.tryHead
    |> Option.map (fun edge -> Seq.unfold unfoldOne ([fst edge], neighborMap) |> Seq.concat |> Set.ofSeq)
    |> Option.map (fun comp -> comp, Set.difference edges comp)

  Seq.unfold unfoldAll

components <| Set.ofList ["a","b";"b","c";"d","e"]

#!fsharp

let solve1 input =
  let edges = input |> parse |> edges

  seq { for edge in edges do edge, tightestLoop edge edges }
  |> Seq.sortBy snd
  |> Seq.rev
  |> Seq.iter (printfn "%A")
  // |> Seq.map fst
  // |> Seq.take 3
  // |> Set.ofSeq
  // |> Set.difference edges
  // |> components
  // |> Seq.map (nodes >> Seq.length)
  // |> Seq.reduce (*)

solve1 testInput

#!fsharp

let input = Aoc.fetchInput 25

input |> parse |> edges |> toDot

#!fsharp

solve1 input

// 1488 too low

#!fsharp

let broken = [
  (("qfj", "tbq"), 9)
  (("xmh", "xqt"), 7)
  (("xgz", "xkg"), 7)
  (("xcd", "xsh"), 7)
  (("vkv", "xtr"), 7)
  (("vkv", "xbl"), 7)
  (("tkp", "zxl"), 7)
  (("tkp", "xbb"), 7)
  (("tjj", "xtj"), 7)
  (("stj", "vsv"), 7)
  (("spx", "zvl"), 7)
  (("spx", "vsq"), 7)
  (("spx", "vgz"), 7)
  (("sgj", "spk"), 7)
  (("rxt", "xsm"), 7)
  (("rsd", "vgz"), 7)
  (("rqz", "ztd"), 7)
  (("rqz", "rxh"), 7)
  (("rbz", "xbp"), 7)
  (("rbz", "vgj"), 7)
  (("qrv", "vhx"), 7)
  (("qqq", "tnh"), 7)
  (("qqh", "xbl"), 7)
  (("qjr", "vld"), 7)
  (("pns", "xsm"), 7)
  (("pgt", "xvp"), 7)
  (("pdt", "vfb"), 7)
  (("pcl", "qnr"), 7)
  (("nvs", "vjp"), 7)
  (("njd", "nmm"), 7)
  (("ndz", "pnh"), 7)
  (("ndr", "tqr"), 7)
  (("ncx", "tnh"), 7)
  (("mxt", "nst"), 7)
  (("mvt", "sdt"), 7)
  (("mtn", "qrq"), 7)
  (("mtn", "phd"), 7)
  (("mth", "tpz"), 7)
  (("mtf", "qcj"), 7)
  (("msx", "rqz"), 7)
  (("mnk", "sgv"), 7)
  (("mnk", "rcc"), 7)
  (("mml", "scv"), 7)
  (("mlg", "qzz"), 7)
  (("mkh", "xbb"), 7)
  (("mjm", "rbz"), 7)
  (("mjj", "mvn"), 7)
  (("mfg", "ttl"), 7)
  (("mcb", "xjp"), 7)
  (("lzz", "tnn"), 7)
  (("lzz", "tgm"), 7)
  (("ltx", "nvz"), 7)
  (("ltn", "nfr"), 7)
  (("ltb", "qvh"), 7)
  (("lss", "pts"), 7)
  (("lsc", "pmk"), 7)
  (("lrp", "vfb"), 7)
  (("lql", "xfp"), 7)
  (("lnh", "zvl"), 7)
  (("lkl", "vbd"), 7)
  (("lhz", "pjd"), 7)
  (("lfh", "rzv"), 7)
  (("ldz", "pmm"), 7)
  (("lbn", "qrp"), 7)
  (("kzf", "mpz"), 7)
  (("ksn", "vkk"), 7)
  (("ksc", "tkk"), 7)
  (("knc", "prl"), 7)
  (("kld", "ntc"), 7)
  (("kkq", "zsx"), 7)
  (("kkq", "srs"), 7)
  (("khj", "tgc"), 7)
  (("khg", "xms"), 7)
  (("kfx", "nmm"), 7)
  (("kdd", "rsz"), 7)
  (("kct", "ntc"), 7)
  (("jzz", "mbc"), 7)
  (("jvd", "rqz"), 7)
  (("jpl", "srs"), 7)
  (("jpl", "shr"), 7)
  (("jmr", "xct"), 7)
  (("jmr", "nzz"), 7)
  (("jkk", "zjx"), 7)
  (("jkj", "rbz"), 7)
  (("jgp", "rxt"), 7)
  (("jgp", "qjd"), 7)
  (("jgp", "pgt"), 7)
  (("jgp", "mcr"), 7)
  (("jdj", "mtn"), 7)
  (("jcq", "phg"), 7)
  (("jbh", "qsc"), 7)
  (("hxx", "mjm"), 7)
  (("htq", "xcq"), 7)
  (("htq", "rkq"), 7)
  (("hsm", "pjd"), 7)
  (("hsg", "njd"), 7)
  (("hpp", "lpk"), 7)
  (("hpp", "hsm"), 7)
  (("hnb", "mvq"), 7)
  (("hlb", "jpj"), 7)
  (("hbl", "vkv"), 7)
  (("hbd", "vrl"), 7)
  (("gzv", "jnq"), 7)
  (("gzk", "mbc"), 7)
  (("gxt", "jqk"), 7)
  (("gvt", "sxs"), 7)
  (("grs", "nrp"), 7)
  (("grq", "xzb"), 7)
  (("grq", "spx"), 7)
  (("grj", "msx"), 7)
  (("grj", "jfp"), 7)
  (("gqx", "mcx"), 7)
  (("gnh", "trs"), 7)
  (("gjr", "xqb"), 7)
  (("ght", "grr"), 7)
  (("ghb", "xvk"), 7)
  (("ggz", "mms"), 7)
  (("ggp", "zjx"), 7)
  (("ggp", "xzn"), 7)
  (("gff", "svr"), 7)
  (("gfb", "hxd"), 7)
  (("gbn", "vkl"), 7)
  (("fxj", "xcq"), 7)
  (("fxj", "mjf"), 7)
  (("fxb", "rxz"), 7)
  (("ftp", "zjs"), 7)
  (("fsz", "gzx"), 7)
  (("fnx", "tjb"), 7)
  (("fmj", "tjj"), 7)
  (("fmj", "tbj"), 7)
  (("fmj", "mzl"), 7)
  (("fmj", "hrh"), 7)
  (("fmd", "lsp"), 7)
  (("fkd", "xsh"), 7)
  (("fjs", "gnh"), 7)
  (("fgp", "vsv"), 7)
  (("dxd", "lrp"), 7)
  (("dsx", "htj"), 7)
  (("dsr", "xzn"), 7)
  (("drs", "tlz"), 7)
  (("drn", "qsc"), 7)
  (("dlr", "xkm"), 7)
  (("dgk", "nlv"), 7)
  (("dcc", "gms"), 7)
  (("czr", "pjd"), 7)
  (("czr", "lhr"), 7)
  (("cpb", "lxs"), 7)
  (("cnl", "xqb"), 7)
  (("cnj", "lhz"), 7)
  (("clf", "xfp"), 7)
  (("chd", "nzd"), 7)
  (("cgn", "rkq"), 7)
  (("cgk", "flr"), 7)
  (("cfr", "mml"), 7)
  (("cfr", "gzk"), 7)
  (("cbq", "cnj"), 7)
  (("cbl", "xzn"), 7)
  (("cbl", "hfh"), 7)
  (("bzn", "zcp"), 7)
  (("bzn", "ghx"), 7)
  (("bxb", "xzn"), 7)
  (("bvb", "xpn"), 7)
  (("bvb", "jxn"), 7)
  (("bvb", "jnq"), 7)
  (("bvb", "ftv"), 7)
  (("btm", "kbq"), 7)
  (("btm", "dnz"), 7)
  (("brs", "rsz"), 7)
  (("brr", "zjx"), 7)
  (("brm", "zjs"), 7)
  (("bqc", "mvq"), 7)
  (("bnr", "mzl"), 7)
  (("bng", "ltx"), 7)
  (("bnf", "rgq"), 7)
  (("bmb", "cgn"), 7)
  (("bls", "kqs"), 7)
  (("bls", "jcq"), 7)
  (("blf", "hbd"), 7)
  (("bdp", "gjh"), 7)
  (("bcv", "zmp"), 7)
  (("bcq", "bdp"), 7)
  (("bbz", "mbt"), 7)
  (("bbq", "rmk"), 7)
  (("bbq", "nzz"), 7)] |> Seq.map fst |> Set.ofSeq |> Set.difference (input |> parse |> edges)

#!fsharp

broken |> components |> Seq.map (nodes >> Seq.length) |> Seq.reduce (*)

// so this one actually made two groups. but it looks like it also removed some nodes from the graph. tightest loop might not be the right thing to measure.

// 547638 too low

#!markdown

I had thoughts!

Weights is overkill. Since edges have no cost and we're just counting them, to get the shortest loop we just fan out until we hit the other end. When we do that's the tightest loop.

We should be able to find _all_ loops through a given node by traversing each edge once. Then we could remove that node, go on to another, and find all loops through it?
