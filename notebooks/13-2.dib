#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# 13.2 - smudge

#!value

#!value --name test

#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.

#...##..#
#....#..#
..##..###
#####.##.
#####.##.
..##..###
#....#..#

#!markdown

Here is my implementation of part 1

#!fsharp

type Coords = int * int

type Pattern = Coords Set

let parse (raw: string) : Pattern list =
    let fold patterns line =
        match patterns with
        | [] when line <> "" -> [ line ] :: patterns
        | head :: rest when line <> "" -> (line :: head) :: rest
        | _ :: _ when line = "" -> [] :: patterns
        | _ -> patterns

    let toPattern lines =
        Set.ofSeq
        <| seq {
            for y, line in List.indexed lines do
                for x, c in Seq.indexed line do
                    if c = '#' then yield x, y
        }

    raw.Split('\n')
    |> Seq.fold fold []
    |> List.rev
    |> List.map (List.rev >> toPattern)

let toAxis groupBy map =
    Seq.groupBy groupBy
    >> Seq.sortBy fst
    >> Seq.map (snd >> Seq.map map >> Seq.toList)
    >> Seq.toList

let rows: Pattern -> int list list = toAxis snd fst

let columns: Pattern -> int list list = toAxis fst snd

let findSymmetry: int list list -> int =
    let rec findSymmetry prev =
        function
        | a :: (_ :: _ as rest) when Seq.forall2 (=) (a :: prev) rest -> List.length prev + 1
        | a :: (_ :: _ as rest) -> findSymmetry (a :: prev) rest
        | _ -> 0

    findSymmetry []

let one lines =
    let fold ((c, r): int * int) (pattern: Pattern) =
        c + (pattern |> columns |> findSymmetry), r + (pattern |> rows |> findSymmetry)

    let (columns, rows) = lines |> parse |> List.fold fold (0, 0)

    columns + (100 * rows)

#!fsharp

#!share test --from value
one test 

#!markdown

Ok. for two we need to rewrite `findSymmetry`.

we can compare sets rather than lists to represent the `#` positions. if the disjunction of the sets contains 1 number, and they are 1 away from each other.

Also need to ensure that this only happens once in the reflection.

#!fsharp

#!share test --from value

let findSymmetry: int list list -> int =
    let differenceCount a b =
      a |> Set.difference b |> Set.union (b |> Set.difference a) |> Set.count

    let smudge a =
      Seq.map2 differenceCount a >> Seq.sum >> ((=) 1)

    let rec findSymmetry prev =
        function
        | a :: (_ :: _ as rest) when smudge (a :: prev) rest -> List.length prev + 1
        | a :: (_ :: _ as rest) -> findSymmetry (a :: prev) rest
        | _ -> 0

    List.map Set.ofList >> findSymmetry []

test |> parse |> Seq.skip 1 |> Seq.head |> rows |> findSymmetry

#!fsharp

#!share test --from value

let two lines =
    let fold ((c, r): int * int) (pattern: Pattern) =
        c + (pattern |> columns |> findSymmetry), r + (pattern |> rows |> findSymmetry)

    let (columns, rows) = lines |> parse |> List.fold fold (0, 0)

    columns + (100 * rows)

two test

#!fsharp

#load "Aoc.fsx"
Aoc.fetchInput 13 |> two
