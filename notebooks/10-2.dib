#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# 10.2 - [in or out](https://adventofcode.com/2023/day/10)

#!value

#!value --name test1
..........
.S------7.
.|F----7|.
.||....||.
.||....||.
.|L-7F-J|.
.|..||..|.
.L--JL--J.
..........

#!value

#!value --name test2
.F----7F7F7F7F-7....
.|F--7||||||||FJ....
.||.FJ||||||||L7....
FJL7L7LJLJ||LJ.L-7..
L--J.L7...LJS7F-7L7.
....F-J..F7FJ|L7L7L7
....L7.F7||L7|.L7L7|
.....|FJLJ|FJ|F7|.LJ
....FJL-7.||.||||...
....L---J.LJ.LJLJ...

#!fsharp

#!share test1 --from value
let parse (input: string) =
    Map.ofSeq <| seq { for y, line in Seq.indexed <|input.Split('\n') do
                       for x, c in Seq.indexed line -> ((x,y), c) }

parse test1

#!fsharp

let print board insides =
  let keys = Map.keys board

  let maxY = keys |> Seq.map snd |> Seq.max
  let maxX = keys |> Seq.map fst |> Seq.max
  seq { for y in 0..maxY do
        yield "\n"
        for x in 0..maxX do
           let pt = x,y
           yield if Set.contains pt insides then "*"
                 else match Map.tryFind pt board with
                      | Some c -> string c
                      | None -> " "
  } |> String.concat "" |> printfn "%s"

#!fsharp

#!share test2 --from value

let isOdd x = x % 2 = 1

type Side = Top | Bottom | Middle

let countCrossings row =
  // comming from the left...
  let fold (count, side) tile =
    match tile, side with
    | '7', Bottom | 'J', Top | '|', _ -> count + 1, Middle
    | 'L', Middle -> count, Bottom
    | 'F', Middle -> count, Top
    | 'J', Bottom  | '7', Top -> count, Middle
    | '-', Top | '-', Bottom -> count, side
    | _ -> failwith (row |> List.map string |> String.concat "" |> sprintf "%s <- broken")

  row |> List.fold fold (0, Middle) |> fst

// to count crossings we only need to check the current column from start to top or row from start to left
let isInside (x,y) map =
  let row = [ for x in 0..x -> Map.tryFind (x,y) map ] |> List.choose id
  let crossings = countCrossings row
  if isOdd crossings then
    // printfn "%s" (row |> List.map string |> String.concat "")
    true
  else false



test2
|> parse
|> fun board -> board |> Map.keys |> Seq.filter (fun k -> isInside k board) |> Set.ofSeq |> print board

#!fsharp

".|F--7||||||||FJ." |> List.ofSeq |> countCrossings |> printfn "%A"
"L--J.L7...LJF7F-7L7." |> List.ofSeq |> countCrossings |> printfn "%A"

#!markdown

I'm happy with that. Now we just need to

1. replace the disconnected pipes with empty space
1. replace the "S" with a pipe

#!value

#!value --name test3

FF7FSF7F7F7F7F7F---7
L|LJ||||||||||||F--J
FL-7LJLJ||||||LJL-77
F--JF--7||LJLJ7F7FJ-
L---JF-JLJ.||-FJLJJ7
|F|F-JF---7F7-L7L|7|
|FFJF7L7F-JF7|JL---7
7-L-JL7||F7|L7F-7F7|
L.L7LFJ|||||FJL7||LJ
L7JLJL-JLJLJL--JLJ.L

#!fsharp

#!share test3 --from value

type Cardinal = North | South | East | West
type Point = int * int

type Step = { point: Point; cardinal: Cardinal; tile: char }

let reverseCardinal =
  function
  | North -> South
  | South -> North
  | East -> West
  | West -> East

let connectionDirections =
  function
  | 'S' -> [North; South; East; West]
  | 'L' -> [North; East]
  | 'F' -> [South; East]
  | '7' -> [South; West]
  | 'J' -> [North; West]
  | '|' -> [North; South]
  | '-' -> [East; West]
  | _ -> []
  >> Set.ofList

let neighborPt (x,y) =
  function
  | North -> x, y - 1
  | South -> x, y + 1
  | East -> x + 1, y
  | West -> x - 1, y

let next ({point = pt; cardinal = from; tile = tile} as step) map : Step option =
  let bindTile nPt exitDirection nTile =
    if nTile |> connectionDirections |> Set.contains (reverseCardinal exitDirection) then
      Some { point = nPt; cardinal = exitDirection; tile = nTile }
    else
      None

  let bindExitDirection exitDirection =
    let pt = (neighborPt pt exitDirection)
    map |> Map.tryFind pt |> Option.bind (bindTile pt exitDirection)

  tile
  |> connectionDirections
  |> Set.remove (reverseCardinal from)
  |> Seq.tryExactlyOne
  |> Option.bind bindExitDirection

let startTile tile pt loop map = 
    let startConnections =
      let inLoop cardinal = Set.contains (neighborPt pt cardinal) loop
      let connectsFrom cardinal =
        let pt = neighborPt pt cardinal
        map |> Map.tryFind pt |> Option.map (connectionDirections >> Set.contains (reverseCardinal cardinal)) |> Option.defaultValue false
      tile |> connectionDirections |> Set.filter inLoop |> Set.filter connectsFrom

    "LF7J|-" |> Seq.tryFind (connectionDirections >> ((=) startConnections))

let findLoop startTile startPt map =
  let rec loop found step =
    match next step map with
    | Some nextStep when not (Set.contains step.point found) -> loop (Set.add step.point found) nextStep
    | _ -> found

  let mapDirection cardinal =
    let pt = neighborPt startPt cardinal
    Map.tryFind pt map |> Option.map (fun tile -> { point = pt; cardinal = cardinal; tile = tile })

  startTile |> connectionDirections |> Seq.choose mapDirection |> Seq.map (loop Set.empty) |> Seq.maxBy (Set.count)

let cleanMap map =
  let mapStart tile pt = 
    let loop = findLoop tile pt map
    let map = map |> startTile tile pt loop |> Option.map (fun start -> Map.add pt start map) |> Option.defaultValue map
    Seq.fold (fun acc pt -> Map.add pt (Map.find pt map) acc) Map.empty loop

  map |> Map.tryFindKey (fun k v -> v = 'S') |> Option.map (mapStart 'S') |> Option.defaultValue Map.empty

print (test3 |> parse |> cleanMap) Set.empty

#!fsharp

#load "Aoc.fsx"

let input = Aoc.fetchInput 10

#!fsharp

#!share test3 --from value
#!share test2 --from value

let solve map = 
  // printfn "maxY: %A" (map |> Map.keys |> Seq.map snd |> Seq.max)
  let cleaned = cleanMap map
  let isInside pt = isInside pt cleaned
  // printfn "maxY: %A" (cleaned |> Map.keys |> Seq.map snd |> Seq.max)
  print cleaned Set.empty
  let pointsNotInLoop = cleaned |> Map.keys |> Set.ofSeq |> Set.difference (map |> Map.keys |> Set.ofSeq)
  let inside = pointsNotInLoop |> Seq.sortBy snd |> Seq.filter isInside |> Set.ofSeq
  let solos = inside |> Seq.groupBy snd |> Seq.filter (snd >> Seq.length >> ((=) 1)) |> Seq.map snd |> Seq.concat |> Set.ofSeq
  print cleaned inside
  print cleaned solos
  Set.count inside


input |> parse |> solve

// test2 |> parse |> solve

// 416 too high
// 406 too low
// 407 too low

// why is it 415?
