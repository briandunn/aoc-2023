#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!markdown

After reading a few times, it sounds like were looking at Dijkstra, saving the cost as we go, then choosing all paths of a cost of 64. 

So as we are accumulating cost, as soon as it is > 64 we're done. 

But that is optimizing for the path to be the cheapest... really we just want the number of paths we can take that are length 64.

the number of paths of length N that *end* at unique nodes.

Maybe a variation of Dijkstra where if a path to a garden is *closer* to N we chose it, not just lower than the last path.

Anywho... as usual, first we parse.

#!fsharp

let testInput = "...........
.....###.#.
.###.##..#.
..#.#...#..
....#.#....
.##..S####.
.##..#...#.
.......##..
.##.#.####.
.##..##.##.
...........
"

#!fsharp

type Tile = Garden | Rock
type Coord = int*int

#!fsharp

let parse (input: string) =
  let lines = input.Split('\n')

  let fold acc (y, line) =
    let fold (start, grid) (x, c) =
      match c with
      | '.' -> (start, grid)
      | '#' ->
        Array2D.set grid x y Rock
        (start, grid)
      | 'S' -> (Some (x, y), grid)
      | _ -> failwith "invalid input"

    line |> Seq.indexed |> Seq.fold fold acc

  let width = lines |> Seq.tryHead |> Option.map String.length |> Option.defaultValue 0
  let height = Seq.length lines - 1
  let grid = Array2D.create width height Garden

  lines
  |> Seq.indexed
  |> Seq.fold fold (None, grid)
  |> function
     | (Some (x, y), grid) -> (x, y), grid
     | None, _ -> failwith "no start"
  
let start, grid = parse testInput

#!markdown

Ok, so far so good. Another fun parser. Now it gets interesting. First we're going to need a way to get a list of valid moves from any tile.

#!fsharp

let inBounds grid (x, y) =
  if x >= 0 && x < Array2D.length1 grid && y >= 0 && y < Array2D.length2 grid then Some (x, y)
  else None

let isGarden grid (x,y) =
  match Array2D.get grid x y with
  | Garden -> Some (x, y)
  | Rock -> None

let neighbors (x, y) grid =
  [(x, y - 1); (x, y + 1); (x - 1, y); (x + 1, y)]
  |> List.choose (inBounds grid >> Option.bind (isGarden grid))

neighbors start grid

#!markdown

Now lets try to write that custom Dijkstra.

My first attempt failed - I think it's because of the disallowing of back tracking.

Removing visited tracking gives me even fewer matches somehow. Perhaps I should think about this more instead of assuming I can hack Dijkstra into shape.

#!fsharp

let walk' target start grid =
  let neighbors tile = neighbors tile grid
  let isCloser a b = abs (a - target) > abs (b - target)

  let closest acc tile weight =
    match acc with
    | Some (_, previousWeight) when isCloser weight previousWeight -> acc
    | _ -> Some (tile, weight)

  let rec loop n found weights =
    let n = n + 1
    if n > 1000 then found else
    weights
    |> Map.fold closest None
    |> function
      | Some (coord, weight) when weight = target ->
          loop n (Set.add coord found) (Map.remove coord weights)

      | Some (coord, weight) ->
          let updateWeights weights neighbor =
            let nextWeight = weight + 1
            Map.tryFind neighbor weights
            |> function
            | Some previousWeight when isCloser nextWeight previousWeight -> weights
            | _ -> Map.add neighbor nextWeight weights
          let weights = coord |> neighbors |> Seq.fold updateWeights weights
          loop n found weights
      | None ->
          found

  (start, 0)
  |> List.singleton
  |> Map.ofList
  |> loop 0 Set.empty

walk' 6 start grid

#!markdown

What if we

* iterate all gardens
  * use modified D to try to find any path to start of length

#!fsharp

let walk'' target start dest grid =
  let neighbors tile = neighbors tile grid
  let isCloser a b = abs (a - target) > abs (b - target)

  let closest acc tile weight =
    match acc with
    | Some (_, previousWeight) when isCloser weight previousWeight -> acc
    | _ -> Some (tile, weight)

  let rec loop weights =
    weights
    |> Map.fold closest None
    |> function
      | Some (coord, weight) when weight = target && coord = dest -> true
      | Some (coord, weight) ->
          let updateWeights weights neighbor =
            let nextWeight = weight + 1
            Map.tryFind neighbor weights
            |> function
            | Some previousWeight when isCloser nextWeight previousWeight -> weights
            | _ -> Map.add neighbor nextWeight weights
          let nextWeights = coord |> neighbors |> Seq.fold updateWeights weights
          if weights <> nextWeights then loop (Map.remove coord nextWeights)
          else false
      | None -> false

  (start, 0)
  |> List.singleton
  |> Map.ofList
  |> loop

let mapi x y =
  function
  | Garden -> 
     walk'' 6 start (x,y) grid
  | _ -> false


let reachable = Array2D.mapi mapi grid

seq { for x in 0 .. Array2D.length1 reachable - 1 do
        for y in 0 .. Array2D.length2 reachable - 1 do
          if Array2D.get reachable x y then (x, y)
} |> Seq.toList

#!markdown

Ok, that didn't work. Let's get simpler. Maybe the puzzle description has a clue. I'm sure it won't be efficient enough for whatever part 2 is, but we could:

* from start, find all gardens we can get to in 1 step
* from each of those gardens find all points we can get to in 1 step
* keep going until we have taken 64 steps

They pretty much spell it out like that in the definition. Lets give it a shot.

#!fsharp

let walk start stepTarget grid = 
  let neighbors tile = grid |> neighbors tile |> Set.ofSeq
  let rec loop steps =
    if steps = stepTarget then id
    else
      Set.map neighbors >> Set.unionMany >> loop (steps + 1)

  start |> Set.singleton |> loop 0

walk start 6 grid

#!markdown

Ok. now we're getting somewhere. Done with part 1?

#!fsharp

let fetchInput day =
  let session = "53616c7465645f5f10b226a63ffd38a2e4e417f9686924ec98b28a87c982fdb4b2e08aa5c3bb23d2863857450194a13bc6ff565cf1426c7e47de2e52cec63b31"
  let url = sprintf "https://adventofcode.com/2023/day/%d/input" day
  task {
    use client = new System.Net.Http.HttpClient()
    client.DefaultRequestHeaders.Add("Cookie", sprintf "session=%s" session)
    return! url |> client.GetStringAsync
  }


let input = fetchInput 21 |> Async.AwaitTask |> Async.RunSynchronously

let start, grid = parse input
walk start 64 grid

#!markdown

## part 2

Ok that wrapped 1. just implementing the alg they described. Looks like there are some examples in step 2 to make sure our infinite map is working.

#!fsharp

let neighbors (x, y) grid =
  let w = Array2D.length1 grid
  let h = Array2D.length2 grid

  let translate (x', y') =
    let x' = x' % w
    let y' = y' % h
    (if x' < 0 then w else 0) + x', (if y' < 0 then h else 0) + y'

  let choose (x, y) =
    (x,y) |> translate |> isGarden grid |> Option.map (function _ -> (x,y))

  [(x, y - 1); (x, y + 1); (x - 1, y); (x + 1, y)]
  |> List.choose choose

let testStart, testGrid = parse testInput

[0,0;10,10;-16,5] |> List.map (fun pt -> neighbors pt testGrid)

#!markdown

Ok I'm confused - why are the dimensions 11 X 12 not 11 X 11?

#!fsharp

let print grid =
  let w = Array2D.length1 grid
  let h = Array2D.length2 grid

  seq { for y in 0 .. h - 1 do
          for x in 0 .. w - 1 do
            match Array2D.get grid x y with
            | Garden -> '.'
            | Rock -> '#'
            | _ -> failwith "invalid input"
          '\n' }
  |> Seq.map string |> String.concat ""

testGrid |> print |> printfn "%s"

#!markdown

Ok. with infinite map do we get the same number for pt 1?

#!fsharp

let input = fetchInput 21 |> Async.AwaitTask |> Async.RunSynchronously

let start, grid = parse input

let walk start stepTarget grid = 
  let neighbors tile = grid |> neighbors tile |> Set.ofSeq
  let rec loop steps =
    if steps = stepTarget then id
    else
      Set.map neighbors >> Set.unionMany >> loop (steps + 1)

  start |> Set.singleton |> loop 0

walk start 10 grid
