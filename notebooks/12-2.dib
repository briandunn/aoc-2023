#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# 10.2 unfold springs or something

#!value

#!value --name test

???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1

#!fsharp

type Status = Operational | Damaged | Unknown

type Record =
    { statuses: Status seq
      damagedGroupLengths: int seq }

let parse (input: string) =
  let lines = input.Split([|'\n'|], StringSplitOptions.RemoveEmptyEntries)

  let parseLine (line: string) = 
    line.Split(' ')
    |> function
       | [|pattern; counts|] ->
          let statuses = pattern
                         |> Seq.replicate 5
                         |> String.concat "?"
                         |> Seq.map (function '?' -> Unknown | '#' -> Damaged | '.' -> Operational)

          let damagedGroupLengths = (counts |> Seq.replicate 5 |> String.concat ",").Split(',') |> Seq.map int
          {
            statuses = statuses
            damagedGroupLengths = damagedGroupLengths
          } |> Some
       | _ -> None

  lines |> Seq.choose parseLine

#!fsharp

#!share test --from value

parse test

#!markdown

# strat

Ok I think the trick is going to be dividing it up. there are innate bounds on each section. Anchored by #.

and the number sequences. let's say 3,2,1. the minimum space that can contain is sum + count, or 9.

could start by bunching them up at 1 end.

So for this example:

```
?###???????? 3,2,1
```

There is no reason to permute where the end of the first set of three is further right than 5 from the end. so the range of possible spaces is 0-7

we have the total number of spaces that can be used from the length of the statuses.
we can subtract the sum of the lengths + count - 1 of lengths to find the number of slots that must be filled with operational. Then the permutations we need are all possible distributions of n operationals into count - 1 groups.

ex, total space is 12. permutations to filter would be
###.##.#....
.###.##.#...
..###.##.#..
...###.##.#.
....###.##.#
###..##.#...
###...##.#..
###....##.#.
###.....##.#
###.##..#...
###.##...#..
###.##....#.
###.##.....#

#!fsharp

let rec distribute groups total =                      
   match groups with
   | 1 -> [[total]]                             
   | groups -> [for i in 0..total do for dist in distribute (groups - 1) (total - i) -> i::dist]      

let distributions' groups total =
   let rec loop acc =
      function
      | (head,total,groups)::rest ->
         match groups with
         | 1 -> loop ((total::head)::acc) rest
         | groups -> loop acc ([for i in 0..total do i::head, total - i, groups - 1] @ rest)
      | [] -> acc

   loop [] [[],total,groups]

let distributions groups total =
   let unfold =
      let rec loop =
         function
         | (head,total,groups)::rest ->
            match groups with
            | 1 -> Some ((total::head), rest)
            | groups -> loop ([for i in 0..total do i::head, total - i, groups - 1] @ rest)
         | [] -> None
      loop

   Seq.unfold unfold [[],total,groups]

// [for (groups, total) in [3,3] do
//   yield distributions groups total
//   yield distribute groups total ] |> List.iter (List.sort >> printfn "%A")

#!markdown

Ok thats way too many permutations even once we get the function to be fast.

What if we go incrementally

find the index ranges for each run
take from the statuses until we hit the upper end of the range of the first run
permute unknowns in that range and filter for that run
do for all runs
now we know the index in each of where the run occurs
so for all the runs we can count the combinations where they fit together.

#!fsharp

let satisfies
    { statuses = statuses
      damagedGroupLengths = lengths }
    =
    let damagedGroupLengths: Status seq -> int list =
        let fold (current, lengths) status =
            match status with
            | Damaged ->
                match current with
                | None -> (Some 1, lengths)
                | Some n -> (Some(n + 1), lengths)

            | _ ->
                match current with
                | None -> (None, lengths)
                | Some n -> (None, n :: lengths)

        Seq.fold fold (None, [])
        >> function
            | (None, lengths) -> lengths
            | (Some n, lengths) -> n :: lengths
        >> List.rev

    statuses
    |> damagedGroupLengths
    |> ((=) (Seq.toList lengths))


let allPermutations ({ statuses = statuses } as r) =
    let slots = statuses |> Seq.filter ((=) Unknown) |> Seq.length

    let rec permute length options =
        match length with
        | 0 -> []
        | 1 -> List.map List.singleton options
        | length ->
            options
            |> (permute (length - 1))
            |> List.map (fun permutation -> List.map (fun option -> option :: permutation) options)
            |> List.concat

    let substitute statuses permutation =
        let fold (out, permutation) status =
            match status with
            | Unknown -> Seq.head permutation :: out, Seq.tail permutation
            | status -> status :: out, permutation

        Seq.fold fold ([], permutation) statuses
        |> fst
        |> List.rev

    permute slots [ Damaged; Operational ]
    |> List.map (fun permutation -> { r with statuses = substitute statuses permutation })

let permute ({ statuses = statuses; damagedGroupLengths = damagedGroupLengths } as r) =

    let totalLength = Seq.length statuses
    let damagedGroupCount = Seq.length damagedGroupLengths
    let totalOperational = totalLength - (Seq.sum damagedGroupLengths) - (damagedGroupCount - 1)
    let gapCount = damagedGroupCount + 1
    printfn "%A" (gapCount, totalOperational)
    // distributions totalOperational gapCount |> List.length

// let solve = parse >> Seq.map (permute >> Seq.filter satisfies >> Seq.length) >> Seq.sum

#!fsharp

#!share test --from value
test |> parse |> Seq.skip(1) |> Seq.head |> permute 
// test |> solve

#!markdown

Time to look for help. Gonna basically implement [this](https://github.com/bjorng/advent-of-code-2023/blob/main/day12/lib/day12.ex).

#!fsharp

let runLengthEncode : Status seq -> (Status*int) seq = 
  let fold encoded status =
    match encoded with
    | [] -> [status, 1]
    | (status', count)::rest when status = status' -> (status, count + 1)::rest
    | _ -> (status, 1)::encoded
  Seq.fold fold [] >> Seq.rev

#!fsharp

#!share test --from value

seq {for {statuses = statuses} in parse test -> runLengthEncode statuses}

#!fsharp

let countArangements { statuses = statuses; damagedGroupLengths = lengths } =
  let addUnknown n =
    function
    | (Unknown, n')::rest -> (Unknown, n' + n)::rest
    | statuses when n > 0 -> (Unknown, n)::statuses
    | statuses -> statuses

  let rec loop (lengths: int list) statuses =
    match lengths, statuses with
    | lengths, (Damaged, dl)::(Damaged, dl')::rest -> (Damaged, dl + dl')::rest |> loop lengths 
    | _, (Operational, _)::rest -> loop lengths rest
    | dl::lengths, (Damaged, dl')::(Unknown, ul)::statuses when dl = dl' -> statuses |> addUnknown (ul - 1) |> loop lengths 
    | dl::lengths, (Damaged, dl')::statuses when dl = dl' -> loop lengths statuses
    | (dl::_) as lengths, (Damaged, dl')::(Unknown, ul)::statuses when min (dl - dl') ul < 0 -> 0
    | (dl::_) as lengths, (Damaged, dl')::(Unknown, ul)::statuses ->
      let missing = min (dl - dl') ul
      (Damaged, dl' + missing)::(addUnknown (ul - missing) statuses) |> loop lengths
    | lengths, (Unknown, ul)::rest ->
      let rest = addUnknown (ul - 1) rest
      let fold acc status = status::rest |> loop lengths |> ((+) acc)
      List.fold fold 0 [Operational, 1; Damaged, 1]
    | [], [] -> 1
    | _ -> 0

  statuses |> runLengthEncode |> List.ofSeq |> loop (List.ofSeq lengths)

#!fsharp

#!share test --from value
test |> parse |> Seq.map countArangements |> Seq.sum
// 525152
