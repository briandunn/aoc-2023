#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# 10.2 unfold springs or something

#!value

#!value --name test

???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1

#!fsharp

type Status = Operational | Damaged | Unknown

type Record =
    { statuses: Status seq
      damagedGroupLengths: int seq }

let parse (input: string) =
  let lines = input.Split([|'\n'|], StringSplitOptions.RemoveEmptyEntries)

  let parseLine (line: string) = 
    line.Split(' ')
    |> function
       | [|pattern; counts|] ->
          let statuses = pattern
                         |> Seq.replicate 5
                         |> String.concat "?"
                         |> Seq.map (function '?' -> Unknown | '#' -> Damaged | '.' -> Operational)

          let damagedGroupLengths = (counts |> Seq.replicate 5 |> String.concat ",").Split(',') |> Seq.map int
          {
            statuses = statuses
            damagedGroupLengths = damagedGroupLengths
          } |> Some
       | _ -> None

  lines |> Seq.choose parseLine

#!fsharp

#!share test --from value

parse test

#!markdown

# strat

Ok I think the trick is going to be dividing it up. there are innate bounds on each section. Anchored by #.

and the number sequences. let's say 3,2,1. the minimum space that can contain is sum + count, or 9.

could start by bunching them up at 1 end.

So for this example:

```
?###???????? 3,2,1
```

There is no reason to permute where the end of the first set of three is further right than 5 from the end. so the range of possible spaces is 0-7

we have the total number of spaces that can be used from the length of the statuses.
we can subtract the sum of the lengths + count - 1 of lengths to find the number of slots that must be filled with operational. Then the permutations we need are all possible distributions of n operationals into count - 1 groups.

ex, total space is 12. permutations to filter would be
###.##.#....
.###.##.#...
..###.##.#..
...###.##.#.
....###.##.#
###..##.#...
###...##.#..
###....##.#.
###.....##.#
###.##..#...
###.##...#..
###.##....#.
###.##.....#

#!fsharp

let distributions groups total =
   let rec loop total =
      function
      | 1 -> [[total]]
      | groups -> [for i in 0..total do for dist in loop (total - i) (groups - 1) -> i::dist]

   loop total groups

distributions 5 2

#!fsharp

let satisfies
    { statuses = statuses
      damagedGroupLengths = lengths }
    =
    let damagedGroupLengths: Status seq -> int list =
        let fold (current, lengths) status =
            match status with
            | Damaged ->
                match current with
                | None -> (Some 1, lengths)
                | Some n -> (Some(n + 1), lengths)

            | _ ->
                match current with
                | None -> (None, lengths)
                | Some n -> (None, n :: lengths)

        Seq.fold fold (None, [])
        >> function
            | (None, lengths) -> lengths
            | (Some n, lengths) -> n :: lengths
        >> List.rev

    statuses
    |> damagedGroupLengths
    |> ((=) (Seq.toList lengths))


let allPermutations ({ statuses = statuses } as r) =
    let slots = statuses |> Seq.filter ((=) Unknown) |> Seq.length

    let rec permute length options =
        match length with
        | 0 -> []
        | 1 -> List.map List.singleton options
        | length ->
            options
            |> (permute (length - 1))
            |> List.map (fun permutation -> List.map (fun option -> option :: permutation) options)
            |> List.concat

    let substitute statuses permutation =
        let fold (out, permutation) status =
            match status with
            | Unknown -> Seq.head permutation :: out, Seq.tail permutation
            | status -> status :: out, permutation

        Seq.fold fold ([], permutation) statuses
        |> fst
        |> List.rev

    permute slots [ Damaged; Operational ]
    |> List.map (fun permutation -> { r with statuses = substitute statuses permutation })

let permute ({ statuses = statuses; damagedGroupLengths = damagedGroupLengths } as r) =

    let totalLength = Seq.length statuses
    let damagedGroupCount = Seq.length damagedGroupLengths
    let totalOperational = totalLength - (Seq.sum damagedGroupLengths) - (damagedGroupCount - 1)
    let gapCount = damagedGroupCount + 1
    printfn "%A" (gapCount, totalOperational)
    // distributions totalOperational gapCount |> List.length

// let solve = parse >> Seq.map (permute >> Seq.filter satisfies >> Seq.length) >> Seq.sum

#!fsharp

#!share test --from value
test |> parse |> Seq.skip(1) |> Seq.head |> permute 
// test |> solve
