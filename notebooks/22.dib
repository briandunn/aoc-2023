#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"},{"aliases":[],"languageName":"fsharp","name":"fsharp"}]}}

#!markdown

Yay 3D Tetris!

#!fsharp

#load "Aoc.fsx"

#!fsharp

let testInput = "1,0,1~1,2,1
0,0,2~2,0,2
0,2,3~2,2,3
0,0,4~0,2,4
2,0,5~2,2,5
0,1,6~2,1,6
1,1,8~1,1,9
"

#!fsharp

type Point = int * int * int
type Column = int * int
type Brick = Point * Point

module Point =
  let x (x, _, _) = x
  let y (_, y, _) = y
  let z (_, _, z) = z
  let mapZ f (x, y, z) = (x, y, f z)
  let putZ z (x, y, _) = (x, y, z)

module Brick =
  let z (start, _) = Point.z start
  let topZ (start, stop) = max (Point.z start) (Point.z stop)
  let height (start, stop) = abs (Point.z start - Point.z stop)
  let putZ z =
    function
    | (start, stop) as brick ->
      Point.putZ z start, Point.putZ (z + height brick) stop 

  let occupiedColumns (start, stop) =
    let x1, x2 = Point.x start, Point.x stop
    let y1, y2 = Point.y start, Point.y stop
    seq { for x in x1 .. x2 do
          for y in y1 .. y2 do
            yield x, y }

[(1,0,1),(1,2,1); (1,1,8),(1,1,9)] |> List.map Brick.occupiedColumns

#!fsharp

let parse (input: string) : Brick seq =
  let parsePoint (input: string) =
      input.Split(',') |> Array.map int |> function [| x; y; z |] -> x, y, z

  seq { for line in input.Split('\n') do
         if line <> "" then
          line.Split('~') |> Array.map parsePoint |> Array.sortBy Point.z |> function [| start; stop |] -> (start, stop) }


parse testInput

#!markdown

Alright - parsed. Now to make them fall.

Since the bricks can't rotate Z is the only dimension that will ever change.

find the first unsettled brick with the lowest Z value.
Decrease Z until it is either 1, or the brick collides with another settled brick.

Since this is an iterative process that modifies a state (settled bricks) we can fold

#!fsharp

let updateColumnHeights brick columnHeights =
  let fold acc column =
    Map.change column (Option.defaultValue 0 >> (brick |> Brick.topZ |> max) >> Some) acc
    
  brick |> Brick.occupiedColumns |> Seq.fold fold columnHeights

let columnHeights =
  let fold acc brick = updateColumnHeights brick acc

  Seq.fold fold Map.empty

columnHeights (parse testInput)

#!fsharp

let printHeights columnHeights =
  if columnHeights |> Map.isEmpty |> not then
    let keys = columnHeights |> Map.keys
    seq { for y in 0 .. (keys |> Seq.map snd |> Seq.max) do
            for x in 0 .. (keys |> Seq.map fst |> Seq.max) do
              match Map.tryFind (x, y) columnHeights with
              | Some z -> string z
              | None -> "0"
            "\n"
    } |> String.concat "" |> printfn "%s"

#!fsharp

let settle : Brick seq -> Brick seq =
  let fold (settled, heights) brick =
     let height col = heights |> Map.tryFind col |> Option.defaultValue 0
     let newZ = brick |> Brick.occupiedColumns |> Seq.map height |> Seq.max |> (+) 1
     let brick = Brick.putZ newZ brick
     let heights = updateColumnHeights brick heights

     brick::settled, heights

  Seq.fold fold ([], Map.empty) >> fst >> List.rev >> Seq.ofList

testInput |> parse |> settle

#!fsharp

let fetchInput day =
  let session = "53616c7465645f5f10b226a63ffd38a2e4e417f9686924ec98b28a87c982fdb4b2e08aa5c3bb23d2863857450194a13bc6ff565cf1426c7e47de2e52cec63b31"
  let url = sprintf "https://adventofcode.com/2023/day/%d/input" day
  task {
    use client = new System.Net.Http.HttpClient()
    client.DefaultRequestHeaders.Add("Cookie", sprintf "session=%s" session)
    return! url |> client.GetStringAsync
  }


let input = Aoc.fetchInput 22

let settled = input |> parse |> Seq.sortBy Brick.z |> settle

// 1486 was too high
// 505 is too low

#!markdown

Well. interesting that it's too high. I'm not confident in my `settle` implementation. Also, a more accurate definition for `disintegratable`

for each brick
* remove the brick
* settle again
did the `z` of any *other* brick change?

#!fsharp

let canDisintegrate' (settled: Brick seq) =
  let byTopZ = settled |> Seq.groupBy Brick.topZ
  let byZ = settled |> Seq.groupBy Brick.z |> Map.ofSeq

  seq {
    for topZ, bricks in byTopZ do
      let resting = Map.tryFind (topZ + 1) byZ |> Option.defaultValue Seq.empty |> Seq.map (Brick.occupiedColumns >> Set.ofSeq)
      for i in 0 .. Seq.length bricks - 1 do
        let occupied = bricks |> Seq.removeAt i |> Seq.map Brick.occupiedColumns |> Seq.concat |> Set.ofSeq
        if resting |> Seq.exists (Set.intersect occupied >> ((=) Set.empty)) |> not then
          Seq.item i bricks
  }

let fallsWhenRemoved brick settled =
  let removed = Seq.filter ((<>) brick) settled

  removed
  |> Set.ofSeq
  |> Set.difference (Set.ofSeq (settle removed))

let canDisintegrate settled =
  seq { for brick in settled -> fallsWhenRemoved brick settled }

testInput |> parse |> settle |> canDisintegrate

#!markdown

Ok that bruit force definition sure looks right to me. So I think `settle` is broken.

#!fsharp

let settleIsIdempotent input =
  let settled = settle input
  printfn "settled: %A" settled
  let settledAgain = settle settled
  printfn "settled again: %A" settledAgain
  Set.ofSeq settled = Set.ofSeq settledAgain

testInput |> parse |> settleIsIdempotent

#!markdown

Maybe just an ordering thing?

#!markdown

Ok. was two things - order of output and seq comparison.

#!markdown

Ok sweet. now part 2. count the bricks that would fall for each removal.

So we can start by removing the 522 from part 1 that we know result in 0.

Then for the remaining bricks, we remove, settle, and count the changed bricks.

#!fsharp

settled |> Seq.length |> printfn "%d total bricks"

// settled |> canDisintegrate |> Seq.map Set.count |> Seq.iter (printfn "%d would fall")

// 81022 too low

#!markdown

Ok so but set comparison doesn't account for if bricks shift into being the same as another brick.

#!fsharp

let fallWhenRemoved brick settled =
  let removed = Seq.filter ((<>) brick) settled
  let settled = settle removed
  removed |> Seq.map2 (<>) settled |> Seq.filter id |> Seq.length


settled |> Seq.map (fun brick -> fallWhenRemoved brick settled) |> Seq.filter ((=) 0) |> Seq.length

#!markdown

Wow that was a lot faster than messing with sets. And changing `settle` to use a list was also a big performance improvement. Let's see part 2.

#!fsharp

settled |> Seq.map (fun brick -> fallWhenRemoved brick settled) |> Seq.sum
